{"version":3,"sources":["../../../sbsmljs/lib/errors.js","logo.svg","lib/Linter.js","App.js","reportWebVitals.js","index.js","../../../sbsmljs/lib/parser.js"],"names":["module","exports","ParserError","message","lineNumber","this","line","SBSLinter","props","setParser","bind","setParserError","clearParserError","state","parser","parserError","newParser","setState","err","className","style","display","updateParser","React","Component","TextEditor","handleChange","handleScroll","value","scrollTopValue","myRef","createRef","SBSMLParser","parse","event","target","current","scrollTop","scrollLeftValue","scrollLeft","text","onScroll","ref","onChange","TextDisplay","lines","split","fmtLines","forEach","index","nodeType","parseLine","skipNode","push","ProcessNode","StepNode","SubStepNode","DescriptionNode","fmtText","ProcessLine","StepLine","SubStepLine","ErrorLine","DescriptionLine","ParsedDisplay","processNodeDisplays","processNodes","pnode","i","node","ProcessNodeDisplay","stepNodes","snode","nodeName","StepNodeDisplay","descriptionNode","DescriptionDisplay","ErrorDisplay","console","log","GithubLogo","xmlns","width","height","viewBox","fill","fill-rule","clip-rule","d","transform","Title","src","logo","class","href","role","color","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","RE_PROCESS_NODE","RE_STEP_NODE","RE_SUBSTEP_NODE","RE_NEXT_NODE","RE_EMPTY_LINE","require","Input","Output","Node","nextNode","previousNode","inputs","outputs","inputNode","nextProcessNodes","stepNode","thenNode","subSteps","name","substepNames","element","descriptionText","undefined","ThenNode","nextNodeName","sbsString","currentNode","currentProcessNode","currentDescriptionNode","processName","processNode","getNamedProcess","nodeList","getNextNodeRecursive","nextProcessNode","setNextNode","test","parseProcessNodeLine","setLineNumber","parseStepNodeLine","parseNextNodeLine","parseDescriptionLine","matched","match","length","addProcessNode","groups","subindex","inputSplitResult","parseInputs","setInputs","updateNodeName","outputSplitResult","parseOutputs","setPreviousNode","addSubStep","addStepNode","setDescriptionNode","inputSplit","input","outputSplit","addText","addNextProcessNode","jsonify","parseString","p","splitToLines","parseLines","linkNextNodes"],"mappings":"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","file":"static/js/main.7abd7cab.chunk.js","sourcesContent":["\r\nfunction ParserError(message, lineNumber) {\r\n    this.message = message;\r\n    this.line = lineNumber;\r\n}\r\n\r\nmodule.exports.ParserError = ParserError;","export default __webpack_public_path__ + \"static/media/logo.7b910d0d.svg\";","import React from 'react';\r\nimport {ProcessNode, SBSMLParser, StepNode, DescriptionNode, SubStepNode} from 'sbsmljs/lib/parser';\r\n\r\nconst EXAMPLE_SBS = `--- Bake a cake ---\r\n1. Butter > Melt some butter >> melted butter\r\n    1a. Put the cake in a small dish\r\n    1b. Melt in the microwave\r\n2. Mix the butter with the cake Mix\r\nThis makes the icing mix good.\r\n3. Put the cake in the oven\r\n4. Wait 30 minutes\r\n5. Take the cake out of the oven\r\nthen: Make the icing\r\n\r\n--- Make the icing ---\r\n1. Melt some more butter\r\n2. Mix the butter with the icing and milk\r\n3. Spread the icing on the cake!`\r\n\r\nexport class SBSLinter extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.setParser = this.setParser.bind(this);\r\n      this.setParserError = this.setParserError.bind(this);\r\n      this.clearParserError = this.clearParserError.bind(this);\r\n\r\n\r\n\r\n      this.state = {\r\n          parser: null,\r\n          parserError: null\r\n      };\r\n    }\r\n  \r\n    setParser(newParser) {\r\n        this.setState({\r\n            parser: newParser\r\n        });\r\n    }\r\n\r\n    setParserError(err) {\r\n        this.setState({\r\n            parserError: err\r\n        })\r\n    }\r\n\r\n    clearParserError() {\r\n        this.setState({\r\n            parserError: null\r\n        })        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"row main justify-content-center\">\r\n            <div className=\"col p-0\" style={{display: \"contents\"}}>\r\n                <form className=\"editorMainForm\">\r\n                    <TextEditor updateParser={this.setParser} setParserError={this.setParserError} clearParserError={this.clearParserError}/>\r\n                </form>\r\n                <ParsedDisplay parser={this.state.parser} parserError={this.state.parserError}/>\r\n\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TextEditor extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleScroll = this.handleScroll.bind(this);\r\n\r\n      this.state = {\r\n          value: EXAMPLE_SBS,\r\n          scrollTopValue: \"\",\r\n          parserError: null\r\n      };\r\n      this.myRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        var newParser = SBSMLParser.parse(this.state.value);\r\n        this.props.updateParser(newParser);\r\n    }\r\n    handleChange(event) {\r\n        try {\r\n            var newParser = SBSMLParser.parse(event.target.value);\r\n        }\r\n        catch(err) {          \r\n            this.props.setParserError(err)\r\n            this.setState({\r\n                value: event.target.value,\r\n                parserError: err,\r\n            });\r\n            return;\r\n        }\r\n        this.props.clearParserError();\r\n        this.props.updateParser(newParser);\r\n        this.setState({\r\n            value: event.target.value,\r\n            parserError: null,\r\n        });\r\n    }\r\n    handleScroll() {\r\n        this.setState({\r\n            scrollTopValue: this.myRef.current.scrollTop,\r\n            scrollLeftValue: this.myRef.current.scrollLeft,\r\n\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"editorMain\">\r\n            <TextDisplay text={this.state.value} scrollTop={this.state.scrollTopValue} scrollLeft={this.state.scrollLeftValue} parserError={this.state.parserError}/>\r\n            <textarea onScroll={this.handleScroll} ref={this.myRef} className=\"invis text-nowrap\" value={this.state.value} onChange={this.handleChange}/>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass TextDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.myRef.current) {\r\n            this.myRef.current.scrollTop = this.props.scrollTop;\r\n            this.myRef.current.scrollLeft = this.props.scrollLeft;\r\n        }\r\n    }\r\n\r\n    parse(text) {\r\n        var lines = text.split(/\\r?\\n/);\r\n        var fmtLines = [];\r\n\r\n        lines.forEach((line, index) => {\r\n            var nodeType = SBSMLParser.parseLine(line);\r\n            var skipNode = false;\r\n\r\n            if (this.props.parserError !== null) {\r\n                if (this.props.parserError.line === index) {\r\n                    fmtLines.push(<ErrorLine text={line}/>);\r\n                    skipNode = true;\r\n                }\r\n            }\r\n\r\n            if (!skipNode) {\r\n                switch(nodeType) {\r\n                    case ProcessNode:\r\n                        fmtLines.push(<ProcessLine text={line} key={index}/>)\r\n                        break;\r\n                    case StepNode:\r\n                        fmtLines.push(<StepLine text={line} key={index}/>)\r\n                        break;\r\n                    case SubStepNode:\r\n                        fmtLines.push(<SubStepLine text={line} key={index}/>)\r\n                        break;\r\n                    case DescriptionNode:\r\n                        fmtLines.push(<DescriptionLine text={line} key={index}/>)\r\n                        break;\r\n                    default:\r\n                        fmtLines.push(line + \"\\n\")\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n        return fmtLines;\r\n    }\r\n\r\n    render() {\r\n        var fmtText = this.parse(this.props.text);\r\n        return (\r\n            <pre ref={this.myRef} scrollTop={this.props.scrollTop} scrollLeft={this.props.scrollLeft} className=\"editorPre\">{fmtText}</pre>\r\n        );\r\n    }\r\n}\r\n\r\nclass ProcessLine extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"greenHighlight\">{this.props.text}</div>\r\n        )\r\n    }\r\n}\r\n\r\nclass StepLine extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"yellowHighlight\">{this.props.text}</div>\r\n        )\r\n    }\r\n}\r\n\r\nclass SubStepLine extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"lightYellowHighlight\">{this.props.text}</div>\r\n        )\r\n    }\r\n}\r\n\r\nclass ErrorLine extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"redHighlight\">{this.props.text}</div>\r\n        )\r\n    }\r\n}\r\n\r\nclass DescriptionLine extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"blueHighlight\">{this.props.text}</div>\r\n        )\r\n    }\r\n}\r\n\r\nclass ParsedDisplay extends React.Component {\r\n    render() {\r\n        if (this.props.parserError != null) {\r\n            return (\r\n                <div className=\"parsedDisplay p-3 float-left\">\r\n                    <ErrorDisplay parserError={this.props.parserError}/>\r\n                </div>\r\n            )            \r\n        }\r\n\r\n        var parser = this.props.parser; \r\n        var processNodeDisplays = [];\r\n        if (parser !== null) {\r\n            parser.processNodes.forEach((pnode, i) => {\r\n                processNodeDisplays.push(<ProcessNodeDisplay key={i} node={pnode}/>)\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"parsedDisplay p-3 float-left\">\r\n                {processNodeDisplays}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass ProcessNodeDisplay extends React.Component {\r\n    render() {\r\n        var stepNodes = [];\r\n        this.props.node.stepNodes.forEach((snode, i) => {\r\n            stepNodes.push(<StepNodeDisplay key={i} node={snode}/>)\r\n        })\r\n        return (\r\n            <div className=\"left-align\">\r\n                <h2 className=\"rounded p-2 processNode bg-light\">{this.props.node.nodeName}</h2>\r\n                {stepNodes}\r\n            </div>\r\n        )\r\n    }   \r\n}\r\n\r\nclass StepNodeDisplay extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h5 className=\"stepNode\">{this.props.node.nodeName}\r\n                <br/>\r\n                </h5>\r\n                <DescriptionDisplay descriptionNode={this.props.node.descriptionNode}/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nclass DescriptionDisplay extends React.Component {\r\n    render() {\r\n        if (this.props.descriptionNode.text !== null) {\r\n            return (\r\n                <h6 className=\"descriptionNode\">{this.props.descriptionNode.text}</h6>\r\n            )\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nclass ErrorDisplay extends React.Component {\r\n    render() {\r\n        console.log(this.props.parserError.message);\r\n        return (\r\n            <h5 className=\"text-danger\">Line #{this.props.parserError.line}: {this.props.parserError.message}</h5>\r\n        )\r\n\r\n    }    \r\n}","import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './scss/custom.scss'\nimport { SBSLinter } from './lib/Linter';\n\nfunction GithubLogo() {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" viewBox=\"0 0 1024 1024\" fill=\"none\">\n      <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\" transform=\"scale(64)\" fill=\"#1B1F23\" />\n    </svg>\n  )\n}\n\nfunction Title() {\n  return (\n    <div className=\"title row align-items-center justify-content-center\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <img src={logo} width=\"100px\" height=\"100px\"/>\n          <h1 className=\"display-1\">Step-By-Step Markup Language</h1>\n          <h6>A simple markup language for describing technical or business processes.</h6>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <a class=\"btn btn-light\" href=\"https://github.com/adambaumeister/sbsml/blob/main/spec/spec.md\" role=\"button\">Read the Spec             <GithubLogo/> </a>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\" fill=\"currentColor\" class=\"bi bi-blockquote-left\" viewBox=\"0 0 16 16\">\n            <path d=\"M2.5 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm5 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm0 3a.5.5 0 0 0 0 1h6a.5.5 0 0 0 0-1h-6zm-5 3a.5.5 0 0 0 0 1h11a.5.5 0 0 0 0-1h-11zm.79-5.373c.112-.078.26-.17.444-.275L3.524 6c-.122.074-.272.17-.452.287-.18.117-.35.26-.51.428a2.425 2.425 0 0 0-.398.562c-.11.207-.164.438-.164.692 0 .36.072.65.217.873.144.219.385.328.72.328.215 0 .383-.07.504-.211a.697.697 0 0 0 .188-.463c0-.23-.07-.404-.211-.521-.137-.121-.326-.182-.568-.182h-.282c.024-.203.065-.37.123-.498a1.38 1.38 0 0 1 .252-.37 1.94 1.94 0 0 1 .346-.298zm2.167 0c.113-.078.262-.17.445-.275L5.692 6c-.122.074-.272.17-.452.287-.18.117-.35.26-.51.428a2.425 2.425 0 0 0-.398.562c-.11.207-.164.438-.164.692 0 .36.072.65.217.873.144.219.385.328.72.328.215 0 .383-.07.504-.211a.697.697 0 0 0 .188-.463c0-.23-.07-.404-.211-.521-.137-.121-.326-.182-.568-.182h-.282a1.75 1.75 0 0 1 .118-.492c.058-.13.144-.254.257-.375a1.94 1.94 0 0 1 .346-.3z\" />\n          </svg>\n          <h2>Simple to Write!</h2>\n          <p>It only takes a minute to jot down a process, or multiple processes, in an SBSML compatible way.\n            <br></br>\n            Use it to keep your process definitions consistent, or to kickstart automation.\n          </p>\n        </div>\n        <div className=\"col\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"75\" height=\"75\" fill=\"currentColor\" class=\"bi bi-braces\" viewBox=\"0 0 16 16\">\n            <path d=\"M2.114 8.063V7.9c1.005-.102 1.497-.615 1.497-1.6V4.503c0-1.094.39-1.538 1.354-1.538h.273V2h-.376C3.25 2 2.49 2.759 2.49 4.352v1.524c0 1.094-.376 1.456-1.49 1.456v1.299c1.114 0 1.49.362 1.49 1.456v1.524c0 1.593.759 2.352 2.372 2.352h.376v-.964h-.273c-.964 0-1.354-.444-1.354-1.538V9.663c0-.984-.492-1.497-1.497-1.6zM13.886 7.9v.163c-1.005.103-1.497.616-1.497 1.6v1.798c0 1.094-.39 1.538-1.354 1.538h-.273v.964h.376c1.613 0 2.372-.759 2.372-2.352v-1.524c0-1.094.376-1.456 1.49-1.456V7.332c-1.114 0-1.49-.362-1.49-1.456V4.352C13.51 2.759 12.75 2 11.138 2h-.376v.964h.273c.964 0 1.354.444 1.354 1.538V6.3c0 .984.492 1.497 1.497 1.6z\" />\n          </svg>\n          <h2>Parsable into code</h2>\n          <p>\n            Convert your processes and steps straight to code.\n            <br></br>\n            A standard format, and definitions for process inputs, outputs and flow logic makes it easy to use your processes in logic.\n          </p>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col m-5\">\n          <div className=\"row\">\n            <h4 style={{ color: 'white' }}>Try it out! <br />\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"40\" height=\"40\" fill=\"currentColor\" class=\"bi bi-arrow-down\" viewBox=\"0 0 16 16\">\n                <path fill-rule=\"evenodd\" d=\"M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z\" />\n              </svg>\n            </h4>\n          </div>\n          <SBSLinter />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App container-fluid\">\n      <Title />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const RE_PROCESS_NODE = /---\\s+(.*)\\s+---/\r\nconst RE_STEP_NODE = /(?<index>\\d+)(?<subindex>\\S+)?\\.\\s*(?<nodename>.*)\\s*/\r\nconst RE_SUBSTEP_NODE = /\\d+\\S+\\./\r\nconst RE_NEXT_NODE = /then:\\s*(?<nextNodeName>.*)\\s*/\r\nconst RE_EMPTY_LINE = /^$/\r\nconst SPLIT_CHAR_INPUT = \">\"\r\nconst SPLIT_CHAR_OUTPUT = \">>\"\r\nconst SPLIT_CHAR = \",\" \r\nconst { ParserError } = require(\"./errors\")\r\n\r\nclass Input {\r\n    constructor(text) {\r\n        this.text = text;\r\n    }\r\n}\r\n\r\nclass Output {\r\n    constructor(text) {\r\n        this.text = text;\r\n    }\r\n}\r\n\r\nclass Node {\r\n    constructor() {\r\n        this.nextNode = null;\r\n        this.previousNode = null;\r\n        this.inputs = [];\r\n        this.outputs = [];\r\n        this.line = null;\r\n    }\r\n    setNextNode(node) {\r\n        this.nextNode = node;\r\n    }\r\n    setPreviousNode(node) {\r\n        this.previousNode = node;\r\n    }\r\n    addInput(inputNode) {\r\n        this.inputs.push(inputNode);\r\n    }\r\n    setInputs(inputs) {\r\n        this.inputs = inputs;\r\n    }\r\n    setOutputs(outputs) {\r\n        this.outputs = outputs;\r\n    }\r\n    setLineNumber(lineNumber) {\r\n        this.line = lineNumber;\r\n    }\r\n}\r\n\r\nclass ProcessNode extends Node {\r\n    constructor(nodeName) {\r\n        super();\r\n        this.nodeName = nodeName;\r\n        this.stepNodes = [];\r\n        this.nextProcessNodes = [];\r\n    }\r\n\r\n    addStepNode(stepNode) {\r\n        this.stepNodes.push(stepNode);\r\n    }\r\n    addNextProcessNode(thenNode) {\r\n        this.nextProcessNodes.push(thenNode);\r\n    }\r\n}\r\n\r\nclass SubStepNode extends Node {\r\n    constructor(nodeName) {\r\n        super();\r\n    }\r\n}\r\n\r\nclass StepNode extends Node {\r\n    constructor(nodeName) {\r\n        super();\r\n        this.nodeName = nodeName;\r\n        this.subSteps = [];\r\n        this.descriptionNode == null;\r\n    }\r\n\r\n    addSubStep(stepNode) {\r\n        this.subSteps.push(stepNode);\r\n    }\r\n    updateNodeName(name) {\r\n        this.nodeName = name;\r\n    }\r\n    setDescriptionNode(descriptionNode) {\r\n        this.descriptionNode = descriptionNode;\r\n    }\r\n\r\n    jsonify() {\r\n        var substepNames = [];\r\n        this.subSteps.forEach(element => {\r\n            substepNames.push(element.nodeName);\r\n        })\r\n        var descriptionText = null;\r\n        if (this.descriptionNode !== undefined) {\r\n            descriptionText = this.descriptionNode.text;\r\n        }\r\n        return {\r\n            \"name\": this.nodeName,\r\n            \"substeps\": substepNames,\r\n            \"description\": descriptionText\r\n        };\r\n    }\r\n}\r\n\r\nclass DescriptionNode extends Node {\r\n    constructor() {\r\n        super();\r\n        this.text = null;\r\n    }\r\n    addText(text) {\r\n        if (this.text === null) {\r\n            this.text = text;\r\n        } else {\r\n            this.text = this.text + text;\r\n        }\r\n    }\r\n}\r\n\r\nclass ThenNode extends Node {\r\n    constructor(nextNodeName) {\r\n        super();\r\n        this.nextNodeName = nextNodeName;\r\n        this.nextNode = null;\r\n    }\r\n}\r\n\r\nclass SBSMLParser {\r\n    constructor(sbsString) {\r\n        this.sbsString = sbsString;\r\n\r\n        this.processNodes = [];\r\n        this.currentNode = [];\r\n        this.currentProcessNode = null;\r\n        this.currentDescriptionNode = null;\r\n    }\r\n\r\n    static parse(parseString) {\r\n        // Given a string in SBSML format, parse it into objects\r\n        var p = new SBSMLParser(parseString);\r\n        var lines = p.splitToLines();\r\n        p.parseLines(lines);\r\n        p.linkNextNodes();\r\n        return p;\r\n    }\r\n\r\n    getProcessTree(processName) {\r\n        // Get a list of nodes rooted at \"processName\"\r\n        var processNode = this.getNamedProcess(processName);\r\n        var nodeList = [];\r\n        this.getNextNodeRecursive(processNode, nodeList);\r\n        return nodeList;\r\n    }\r\n\r\n    getNextNodeRecursive(node, nodeList) {\r\n        nodeList.push(node);\r\n        if (node.nextNode !== null) {\r\n            this.getNextNodeRecursive(node.nextNode, nodeList);\r\n        }\r\n    }\r\n\r\n    linkNextNodes() {\r\n        // For nodes that reference other nodes by name, build the references\r\n        this.processNodes.forEach( processNode => {\r\n            processNode.nextProcessNodes.forEach( thenNode => {\r\n                if (thenNode.nextNode == null) {\r\n                    try {\r\n                        var nextProcessNode = this.getNamedProcess(thenNode.nextNodeName);\r\n                        thenNode.setNextNode(nextProcessNode);                        \r\n                    }\r\n                    catch(err) {\r\n                        throw new ParserError(err.message, thenNode.line)\r\n                    }\r\n\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    getNamedProcess(processName) {\r\n        var node = null;\r\n        this.processNodes.forEach(processNode => {\r\n            if (processNode.nodeName == processName) {\r\n                node = processNode;\r\n            }\r\n        })\r\n        if (node !== null) {\r\n            return node;\r\n        } else {\r\n            throw new ParserError(`ProcessNode ${processName} not found.`);\r\n        }\r\n    }\r\n\r\n    splitToLines() {\r\n        var s = this.sbsString.split(/\\r?\\n/);\r\n        return s;\r\n    }\r\n\r\n    static parseLine(line) {\r\n        // Parse a single line and just return the type that results based on the regex logic\r\n        switch(true) {\r\n            case RE_PROCESS_NODE.test(line): \r\n                return ProcessNode;\r\n            case RE_SUBSTEP_NODE.test(line):\r\n                return SubStepNode;\r\n            case RE_STEP_NODE.test(line): \r\n                return StepNode;\r\n            case RE_EMPTY_LINE.test(line):\r\n                return \"\";\r\n            default:\r\n                return DescriptionNode;\r\n        }       \r\n    }\r\n\r\n    parseLines(lines) {\r\n        lines.forEach((element, index) => {\r\n            switch(true) {\r\n                case RE_PROCESS_NODE.test(element): \r\n                    var n = this.parseProcessNodeLine(element);\r\n                    n.setLineNumber(index);\r\n                    break;\r\n                case RE_STEP_NODE.test(element): \r\n                    var n = this.parseStepNodeLine(element);\r\n                    n.setLineNumber(index);\r\n                    break;\r\n                case RE_NEXT_NODE.test(element): \r\n                    var n = this.parseNextNodeLine(element);\r\n                    n.setLineNumber(index);\r\n                    break;\r\n                default:\r\n                    this.parseDescriptionLine(element);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    parseProcessNodeLine(line) {\r\n        console.log(\"ProcessingProcessNode \" + line);\r\n        var matched = line.match(RE_PROCESS_NODE);\r\n        if (matched.length < 2) {\r\n            throw \"Failed to parse ProcessNode\";\r\n        }\r\n        var nodeName = matched[1];\r\n        var processNode = new ProcessNode(nodeName);\r\n        this.addProcessNode(processNode);\r\n        this.currentNode = processNode;\r\n        this.currentProcessNode = processNode;\r\n        return processNode;\r\n    }\r\n\r\n    parseStepNodeLine(line) {\r\n        console.log(`ProcessingStepNode ${line}`);\r\n        var match = line.match(RE_STEP_NODE);\r\n        var index = match.groups[\"index\"];\r\n        var subindex = match.groups[\"subindex\"];\r\n\r\n        if (index === undefined) {\r\n            throw \"Invalid StepNode\";\r\n        }\r\n        var nodeName = match.groups[\"nodename\"];\r\n\r\n        var inputSplitResult = this.parseInputs(nodeName);\r\n        var stepNode = new StepNode(nodeName);\r\n\r\n        if (inputSplitResult !== null) { \r\n            stepNode.setInputs = inputSplitResult[\"inputs\"];\r\n            stepNode.updateNodeName(inputSplitResult[\"nodeName\"]);\r\n\r\n        }\r\n\r\n        var outputSplitResult = this.parseOutputs(nodeName);\r\n        if (outputSplitResult !== null) { \r\n            stepNode.setInputs = outputSplitResult[\"outputs\"];\r\n            nodeName = outputSplitResult[\"nodeName\"];\r\n        }\r\n\r\n        stepNode.setPreviousNode(this.currentNode);\r\n        if (subindex !== undefined ) {\r\n            console.log(`ProcessingStepNodeSubIndex ${subindex}` )\r\n            this.currentNode.addSubStep(stepNode);\r\n        }\r\n\r\n        this.currentNode.setNextNode(stepNode);\r\n        this.currentNode = stepNode;\r\n        this.currentProcessNode.addStepNode(stepNode);\r\n\r\n        var descriptionNode = new DescriptionNode();\r\n        stepNode.setDescriptionNode(descriptionNode);\r\n        this.currentDescriptionNode = descriptionNode;\r\n\r\n        return stepNode;\r\n    }\r\n\r\n    parseInputs(line) {\r\n        var inputSplit = line.split(SPLIT_CHAR_INPUT);\r\n        var inputs = [];\r\n        if (inputSplit.length > 1) {\r\n            console.log(`ProcessingStepInput ${inputSplit[0]}`)\r\n            var inputNames = inputSplit[0];\r\n            inputNames.split(SPLIT_CHAR).forEach(element => {\r\n                var input = new Input(element);\r\n                inputs.push(input);\r\n            })\r\n            return {\"inputs\": inputs, nodeName: inputSplit[1]};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    parseOutputs(line) {\r\n        var outputSplit = line.split(SPLIT_CHAR_OUTPUT);\r\n        var outputs = [];\r\n        if (outputSplit.length > 1) {\r\n            console.log(`ProcessingStepOutputs ${outputSplit[1]}`)\r\n            var inputNames = outputSplit[0];\r\n            inputNames.split(SPLIT_CHAR).forEach(element => {\r\n                var input = new Output(element);\r\n                outputs.push(input);\r\n            })\r\n            return {\"outputs\": outputs, nodeName: outputSplit[1]};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    parseDescriptionLine(line) {\r\n        /*\r\n        Parse description lines; \r\n        1. this is the step line\r\n        everything below it is the description!\r\n        */\r\n        console.log(`ProcessingDescriptionLine ${line}`);\r\n        // Ignore the case where text is seen prior to any node\r\n        if(this.currentDescriptionNode === null || this.currentDescriptionNode === undefined ) {\r\n            return;\r\n        } \r\n        // Ignore nodes that can't accept a description\r\n        if(this.currentNode.descriptionNode === undefined) {\r\n            return;\r\n        } \r\n        this.currentNode.descriptionNode.addText(line);\r\n    }\r\n\r\n    parseNextNodeLine(line) {\r\n        // Parse the \"then:\" statements, but don't create links here\r\n        console.log(`ProcessingNextNodeLine ${line}`);\r\n        var match = line.match(RE_NEXT_NODE);\r\n        var nextNodeName = match.groups[\"nextNodeName\"];\r\n        var thenNode = new ThenNode(nextNodeName);\r\n        this.currentNode.setNextNode(thenNode);\r\n        this.currentNode = thenNode;\r\n        this.currentProcessNode.addNextProcessNode(thenNode);\r\n        return thenNode;\r\n    }\r\n\r\n    addProcessNode(processNode) {\r\n        this.processNodes.push(processNode);\r\n    }\r\n\r\n    asJSON() {\r\n        this.processNodes.forEach(processNode => {\r\n            processNode.stepNodes.forEach(stepNode => {\r\n                console.log(stepNode.jsonify());\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexports.SBSMLParser = SBSMLParser;\r\nexports.ProcessNode = ProcessNode;\r\nexports.StepNode = StepNode;\r\nexports.SubStepNode = SubStepNode;\r\nexports.DescriptionNode = DescriptionNode;\r\n"],"sourceRoot":""}